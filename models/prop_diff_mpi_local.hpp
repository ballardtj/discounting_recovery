// Code generated by Stan version 2.18.1

#include <stan/model/model_header.hpp>

namespace prop_diff_mpi_local_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "/Users/timothyballard/Nextcloud/DISCRECOV-Q0992/models/prop_diff_mpi_local.stan");
    reader.add_event(118, 116, "end", "/Users/timothyballard/Nextcloud/DISCRECOV-Q0992/models/prop_diff_mpi_local.stan");
    return reader;
}

template <typename T0__, typename T1__, typename T2__>
Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
likelihood(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
               const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
               const std::vector<T2__>& real_data,
               const std::vector<int>& int_data, std::ostream* pstream__) {
    typedef typename boost::math::tools::promote_args<T0__, T1__, T2__>::type local_scalar_t__;
    typedef local_scalar_t__ fun_return_scalar_t__;
    const static bool propto__ = true;
    (void) propto__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

    int current_statement_begin__ = -1;
    try {
        {
        current_statement_begin__ = 10;
        int Nvalid(0);
        (void) Nvalid;  // dummy to suppress unused var warning
        stan::math::fill(Nvalid, std::numeric_limits<int>::min());
        stan::math::assign(Nvalid,get_base1(int_data,1,"int_data",1));

        current_statement_begin__ = 11;
        int Nplaces(0);
        (void) Nplaces;  // dummy to suppress unused var warning
        stan::math::fill(Nplaces, std::numeric_limits<int>::min());
        stan::math::assign(Nplaces,get_base1(int_data,2,"int_data",1));

        current_statement_begin__ = 14;
        local_scalar_t__ delta(DUMMY_VAR__);
        (void) delta;  // dummy to suppress unused var warning
        stan::math::initialize(delta, DUMMY_VAR__);
        stan::math::fill(delta, DUMMY_VAR__);
        stan::math::assign(delta,(get_base1(phi,1,"phi",1) + (get_base1(phi,2,"phi",1) * get_base1(theta,1,"theta",1))));

        current_statement_begin__ = 15;
        local_scalar_t__ sigma(DUMMY_VAR__);
        (void) sigma;  // dummy to suppress unused var warning
        stan::math::initialize(sigma, DUMMY_VAR__);
        stan::math::fill(sigma, DUMMY_VAR__);
        stan::math::assign(sigma,(get_base1(phi,3,"phi",1) + (get_base1(phi,4,"phi",1) * get_base1(theta,2,"theta",1))));

        current_statement_begin__ = 19;
        validate_non_negative_index("y", "Nvalid", Nvalid);
        std::vector<int  > y(Nvalid, int(0));
        stan::math::fill(y, std::numeric_limits<int>::min());

        current_statement_begin__ = 20;
        validate_non_negative_index("p_a", "Nvalid", Nvalid);
        Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> p_a(Nvalid);
        stan::math::initialize(p_a, DUMMY_VAR__);
        stan::math::fill(p_a, DUMMY_VAR__);

        current_statement_begin__ = 21;
        local_scalar_t__ m_a(DUMMY_VAR__);
        (void) m_a;  // dummy to suppress unused var warning
        stan::math::initialize(m_a, DUMMY_VAR__);
        stan::math::fill(m_a, DUMMY_VAR__);

        current_statement_begin__ = 22;
        local_scalar_t__ m_b(DUMMY_VAR__);
        (void) m_b;  // dummy to suppress unused var warning
        stan::math::initialize(m_b, DUMMY_VAR__);
        stan::math::fill(m_b, DUMMY_VAR__);

        current_statement_begin__ = 23;
        local_scalar_t__ d_a(DUMMY_VAR__);
        (void) d_a;  // dummy to suppress unused var warning
        stan::math::initialize(d_a, DUMMY_VAR__);
        stan::math::fill(d_a, DUMMY_VAR__);

        current_statement_begin__ = 24;
        local_scalar_t__ d_b(DUMMY_VAR__);
        (void) d_b;  // dummy to suppress unused var warning
        stan::math::initialize(d_b, DUMMY_VAR__);
        stan::math::fill(d_b, DUMMY_VAR__);

        current_statement_begin__ = 25;
        local_scalar_t__ alpha_m(DUMMY_VAR__);
        (void) alpha_m;  // dummy to suppress unused var warning
        stan::math::initialize(alpha_m, DUMMY_VAR__);
        stan::math::fill(alpha_m, DUMMY_VAR__);

        current_statement_begin__ = 26;
        local_scalar_t__ alpha_d(DUMMY_VAR__);
        (void) alpha_d;  // dummy to suppress unused var warning
        stan::math::initialize(alpha_d, DUMMY_VAR__);
        stan::math::fill(alpha_d, DUMMY_VAR__);

        current_statement_begin__ = 27;
        local_scalar_t__ pi_m(DUMMY_VAR__);
        (void) pi_m;  // dummy to suppress unused var warning
        stan::math::initialize(pi_m, DUMMY_VAR__);
        stan::math::fill(pi_m, DUMMY_VAR__);

        current_statement_begin__ = 28;
        local_scalar_t__ pi_d(DUMMY_VAR__);
        (void) pi_d;  // dummy to suppress unused var warning
        stan::math::initialize(pi_d, DUMMY_VAR__);
        stan::math::fill(pi_d, DUMMY_VAR__);

        current_statement_begin__ = 29;
        local_scalar_t__ d(DUMMY_VAR__);
        (void) d;  // dummy to suppress unused var warning
        stan::math::initialize(d, DUMMY_VAR__);
        stan::math::fill(d, DUMMY_VAR__);

        current_statement_begin__ = 30;
        local_scalar_t__ lp(DUMMY_VAR__);
        (void) lp;  // dummy to suppress unused var warning
        stan::math::initialize(lp, DUMMY_VAR__);
        stan::math::fill(lp, DUMMY_VAR__);


        current_statement_begin__ = 32;
        for (int i = 1; i <= Nvalid; ++i) {

            current_statement_begin__ = 33;
            stan::math::assign(m_a, get_base1(real_data,i,"real_data",1));
            current_statement_begin__ = 34;
            stan::math::assign(m_b, get_base1(real_data,(Nplaces + i),"real_data",1));
            current_statement_begin__ = 35;
            stan::math::assign(d_a, get_base1(real_data,((2 * Nplaces) + i),"real_data",1));
            current_statement_begin__ = 36;
            stan::math::assign(d_b, get_base1(real_data,((3 * Nplaces) + i),"real_data",1));
            current_statement_begin__ = 38;
            stan::math::assign(alpha_m, stan::math::fmax(stan::math::fmax(stan::math::fabs(m_a), stan::math::fabs(m_b)), 1e-10));
            current_statement_begin__ = 39;
            stan::math::assign(alpha_d, stan::math::fmax(stan::math::fmax(stan::math::fabs(d_a), stan::math::fabs(d_b)), 1e-10));
            current_statement_begin__ = 41;
            stan::math::assign(pi_m, ((stan::math::fmax(stan::math::fabs(m_a), stan::math::fabs(m_b)) - stan::math::fmin(stan::math::fabs(m_a), stan::math::fabs(m_b))) / alpha_m));
            current_statement_begin__ = 42;
            stan::math::assign(pi_d, ((stan::math::fmax(stan::math::fabs(d_a), stan::math::fabs(d_b)) - stan::math::fmin(stan::math::fabs(d_a), stan::math::fabs(d_b))) / alpha_d));
            current_statement_begin__ = 44;
            stan::math::assign(d, (pi_m - pi_d));
            current_statement_begin__ = 48;
            stan::model::assign(p_a, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        Phi_approx(((d - delta) * sigma)), 
                        "assigning variable p_a");
            current_statement_begin__ = 50;
            stan::model::assign(y, 
                        stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                        get_base1(int_data,(2 + i),"int_data",1), 
                        "assigning variable y");
        }
        current_statement_begin__ = 54;
        stan::math::assign(lp, bernoulli_log(y, p_a));
        current_statement_begin__ = 56;
        return stan::math::promote_scalar<fun_return_scalar_t__>(transpose(stan::math::to_row_vector(stan::math::array_builder<local_scalar_t__ >().add(lp).array())));
        }
    } catch (const std::exception& e) {
        stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
        // Next line prevents compiler griping about no return
        throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
    }
}


struct likelihood_functor__ {
    template <typename T0__, typename T1__, typename T2__>
        Eigen::Matrix<typename boost::math::tools::promote_args<T0__, T1__, T2__>::type, Eigen::Dynamic, 1>
    operator()(const Eigen::Matrix<T0__, Eigen::Dynamic, 1>& phi,
               const Eigen::Matrix<T1__, Eigen::Dynamic, 1>& theta,
               const std::vector<T2__>& real_data,
               const std::vector<int>& int_data, std::ostream* pstream__) const {
        return likelihood(phi, theta, real_data, int_data, pstream__);
    }
};

class prop_diff_mpi_local_model : public prob_grad {
private:
        int Nsubj;
        int Max_obs_per_subj;
        std::vector<std::vector<double> > real_data;
        std::vector<std::vector<int> > int_data;
public:
    prop_diff_mpi_local_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    prop_diff_mpi_local_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "prop_diff_mpi_local_model_namespace::prop_diff_mpi_local_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 61;
            context__.validate_dims("data initialization", "Nsubj", "int", context__.to_vec());
            Nsubj = int(0);
            vals_i__ = context__.vals_i("Nsubj");
            pos__ = 0;
            Nsubj = vals_i__[pos__++];

            current_statement_begin__ = 62;
            context__.validate_dims("data initialization", "Max_obs_per_subj", "int", context__.to_vec());
            Max_obs_per_subj = int(0);
            vals_i__ = context__.vals_i("Max_obs_per_subj");
            pos__ = 0;
            Max_obs_per_subj = vals_i__[pos__++];

            current_statement_begin__ = 63;
            validate_non_negative_index("real_data", "Nsubj", Nsubj);
            validate_non_negative_index("real_data", "(Max_obs_per_subj * 4)", (Max_obs_per_subj * 4));
            context__.validate_dims("data initialization", "real_data", "double", context__.to_vec(Nsubj,(Max_obs_per_subj * 4)));
            real_data = std::vector<std::vector<double> >(Nsubj, std::vector<double>((Max_obs_per_subj * 4), double(0)));
            vals_r__ = context__.vals_r("real_data");
            pos__ = 0;
            size_t real_data_k_0_max__ = Nsubj;
            size_t real_data_k_1_max__ = (Max_obs_per_subj * 4);
            for (size_t k_1__ = 0; k_1__ < real_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < real_data_k_0_max__; ++k_0__) {
                    real_data[k_0__][k_1__] = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 64;
            validate_non_negative_index("int_data", "Nsubj", Nsubj);
            validate_non_negative_index("int_data", "(Max_obs_per_subj + 2)", (Max_obs_per_subj + 2));
            context__.validate_dims("data initialization", "int_data", "int", context__.to_vec(Nsubj,(Max_obs_per_subj + 2)));
            int_data = std::vector<std::vector<int> >(Nsubj, std::vector<int>((Max_obs_per_subj + 2), int(0)));
            vals_i__ = context__.vals_i("int_data");
            pos__ = 0;
            size_t int_data_k_0_max__ = Nsubj;
            size_t int_data_k_1_max__ = (Max_obs_per_subj + 2);
            for (size_t k_1__ = 0; k_1__ < int_data_k_1_max__; ++k_1__) {
                for (size_t k_0__ = 0; k_0__ < int_data_k_0_max__; ++k_0__) {
                    int_data[k_0__][k_1__] = vals_i__[pos__++];
                }
            }


            // initialize transformed data variables
            // execute transformed data statements

            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 69;
            num_params_r__ += 1;
            current_statement_begin__ = 70;
            num_params_r__ += 1;
            current_statement_begin__ = 71;
            validate_non_negative_index("delta_raw", "Nsubj", Nsubj);
            num_params_r__ += Nsubj;
            current_statement_begin__ = 73;
            num_params_r__ += 1;
            current_statement_begin__ = 74;
            num_params_r__ += 1;
            current_statement_begin__ = 75;
            validate_non_negative_index("sigma_raw", "Nsubj", Nsubj);
            num_params_r__ += Nsubj;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~prop_diff_mpi_local_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 69;
        if (!(context__.contains_r("delta_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "delta_mean", "double", context__.to_vec());
        double delta_mean(0);
        delta_mean = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(delta_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 70;
        if (!(context__.contains_r("delta_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "delta_sd", "double", context__.to_vec());
        double delta_sd(0);
        delta_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, delta_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 71;
        if (!(context__.contains_r("delta_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable delta_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("delta_raw");
        pos__ = 0U;
        validate_non_negative_index("delta_raw", "Nsubj", Nsubj);
        context__.validate_dims("parameter initialization", "delta_raw", "vector_d", context__.to_vec(Nsubj));
        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw(Nsubj);
        size_t delta_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            delta_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(delta_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable delta_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 73;
        if (!(context__.contains_r("sigma_mean")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_mean missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_mean");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_mean", "double", context__.to_vec());
        double sigma_mean(0);
        sigma_mean = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_mean);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_mean: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 74;
        if (!(context__.contains_r("sigma_sd")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_sd missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_sd");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_sd", "double", context__.to_vec());
        double sigma_sd(0);
        sigma_sd = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma_sd);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_sd: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 75;
        if (!(context__.contains_r("sigma_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_raw");
        pos__ = 0U;
        validate_non_negative_index("sigma_raw", "Nsubj", Nsubj);
        context__.validate_dims("parameter initialization", "sigma_raw", "vector_d", context__.to_vec(Nsubj));
        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_raw(Nsubj);
        size_t sigma_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            sigma_raw(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_lb_unconstrain(0, sigma_raw);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_raw: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 69;
            local_scalar_t__ delta_mean;
            (void) delta_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_mean = in__.scalar_constrain(lp__);
            else
                delta_mean = in__.scalar_constrain();

            current_statement_begin__ = 70;
            local_scalar_t__ delta_sd;
            (void) delta_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_sd = in__.scalar_lb_constrain(0, lp__);
            else
                delta_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 71;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> delta_raw;
            (void) delta_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                delta_raw = in__.vector_constrain(Nsubj, lp__);
            else
                delta_raw = in__.vector_constrain(Nsubj);

            current_statement_begin__ = 73;
            local_scalar_t__ sigma_mean;
            (void) sigma_mean;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_mean = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_mean = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 74;
            local_scalar_t__ sigma_sd;
            (void) sigma_sd;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_sd = in__.scalar_lb_constrain(0, lp__);
            else
                sigma_sd = in__.scalar_lb_constrain(0);

            current_statement_begin__ = 75;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> sigma_raw;
            (void) sigma_raw;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_raw = in__.vector_lb_constrain(0, Nsubj, lp__);
            else
                sigma_raw = in__.vector_lb_constrain(0, Nsubj);

            // transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("phi", "4", 4);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> phi(4);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("theta", "2", 2);
            validate_non_negative_index("theta", "Nsubj", Nsubj);
            std::vector<Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> > theta(Nsubj, Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1>(2));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 88;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        delta_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 89;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        delta_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 90;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        sigma_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 91;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        sigma_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 94;
            for (int subj = 1; subj <= Nsubj; ++subj) {

                current_statement_begin__ = 95;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(delta_raw,subj,"delta_raw",1), 
                            "assigning variable theta");
                current_statement_begin__ = 96;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            get_base1(sigma_raw,subj,"sigma_raw",1), 
                            "assigning variable theta");
            }

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 84;
            size_t phi_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(phi(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: phi" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable phi: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 85;
            size_t theta_k_0_max__ = Nsubj;
            size_t theta_j_1_max__ = 2;
            for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    if (stan::math::is_uninitialized(theta[k_0__](j_1__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: theta" << "[" << k_0__ << "]" << "(" << j_1__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }

            // model body

            current_statement_begin__ = 104;
            lp_accum__.add(normal_log<propto__>(delta_mean, 0, 1));
            current_statement_begin__ = 105;
            lp_accum__.add(normal_log<propto__>(delta_sd, 0, 1));
            current_statement_begin__ = 107;
            lp_accum__.add(normal_log<propto__>(sigma_mean, 0, 1));
            current_statement_begin__ = 108;
            lp_accum__.add(normal_log<propto__>(sigma_sd, 0, 1));
            current_statement_begin__ = 110;
            lp_accum__.add(normal_log<propto__>(sigma_raw, 0, 1));
            current_statement_begin__ = 111;
            lp_accum__.add(normal_log<propto__>(delta_raw, 0, 1));
            current_statement_begin__ = 115;
            lp_accum__.add(sum(map_rect<1, likelihood_functor__>(phi, theta, real_data, int_data, pstream__)));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("delta_mean");
        names__.push_back("delta_sd");
        names__.push_back("delta_raw");
        names__.push_back("sigma_mean");
        names__.push_back("sigma_sd");
        names__.push_back("sigma_raw");
        names__.push_back("phi");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(4);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(2);
        dims__.push_back(Nsubj);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "prop_diff_mpi_local_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        double delta_mean = in__.scalar_constrain();
        vars__.push_back(delta_mean);

        double delta_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(delta_sd);

        Eigen::Matrix<double, Eigen::Dynamic, 1> delta_raw = in__.vector_constrain(Nsubj);
        size_t delta_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            vars__.push_back(delta_raw(j_1__));
        }

        double sigma_mean = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_mean);

        double sigma_sd = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma_sd);

        Eigen::Matrix<double, Eigen::Dynamic, 1> sigma_raw = in__.vector_lb_constrain(0, Nsubj);
        size_t sigma_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            vars__.push_back(sigma_raw(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 84;
            validate_non_negative_index("phi", "4", 4);
            Eigen::Matrix<double, Eigen::Dynamic, 1> phi(4);
            stan::math::initialize(phi, DUMMY_VAR__);
            stan::math::fill(phi, DUMMY_VAR__);

            current_statement_begin__ = 85;
            validate_non_negative_index("theta", "2", 2);
            validate_non_negative_index("theta", "Nsubj", Nsubj);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > theta(Nsubj, Eigen::Matrix<double, Eigen::Dynamic, 1>(2));
            stan::math::initialize(theta, DUMMY_VAR__);
            stan::math::fill(theta, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 88;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        delta_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 89;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        delta_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 90;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        sigma_mean, 
                        "assigning variable phi");
            current_statement_begin__ = 91;
            stan::model::assign(phi, 
                        stan::model::cons_list(stan::model::index_uni(4), stan::model::nil_index_list()), 
                        sigma_sd, 
                        "assigning variable phi");
            current_statement_begin__ = 94;
            for (int subj = 1; subj <= Nsubj; ++subj) {

                current_statement_begin__ = 95;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list())), 
                            get_base1(delta_raw,subj,"delta_raw",1), 
                            "assigning variable theta");
                current_statement_begin__ = 96;
                stan::model::assign(theta, 
                            stan::model::cons_list(stan::model::index_uni(subj), stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list())), 
                            get_base1(sigma_raw,subj,"sigma_raw",1), 
                            "assigning variable theta");
            }

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t phi_j_1_max__ = 4;
                for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                    vars__.push_back(phi(j_1__));
                }
                size_t theta_j_1_max__ = 2;
                size_t theta_k_0_max__ = Nsubj;
                for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                    for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                        vars__.push_back(theta[k_0__](j_1__));
                    }
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "prop_diff_mpi_local_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t phi_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = 2;
            size_t theta_k_0_max__ = Nsubj;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "delta_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t delta_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < delta_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "delta_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_mean";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_sd";
        param_names__.push_back(param_name_stream__.str());
        size_t sigma_raw_j_1_max__ = Nsubj;
        for (size_t j_1__ = 0; j_1__ < sigma_raw_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sigma_raw" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t phi_j_1_max__ = 4;
            for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "phi" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_j_1_max__ = 2;
            size_t theta_k_0_max__ = Nsubj;
            for (size_t j_1__ = 0; j_1__ < theta_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < theta_k_0_max__; ++k_0__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "theta" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
        }

        if (!include_gqs__) return;
    }

}; // model

}  // namespace

typedef prop_diff_mpi_local_model_namespace::prop_diff_mpi_local_model stan_model;

STAN_REGISTER_MAP_RECT(1, prop_diff_mpi_local_model_namespace::likelihood_functor__)
