pi_d
pmax(abs(ll_d),abs(ss_d)
pmax(abs(ll_d),abs(ss_d))
pmin(abs(ll_d),abs(ss_d))
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / max(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / max(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.wrapper=function(pars,dat){
#extract pars
delta=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
delta,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / max(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / max(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.wrapper=function(pars,dat){
#extract pars
delta=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
delta,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
delta=-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
inits=c(1,1)
#inits=c(delta,sigma)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('k','sigma'),
generating=c(k,sigma),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=hyperbolic.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
recov_list=list()
recov_tmp=data.frame(parname=c('delta','sigma'),
generating=c(delta,sigma),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=propdiff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
inits=c(delta,sigma)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('delta','sigma'),
generating=c(delta,sigma),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=propdiff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
inits=c(0,1)
#inits=c(delta,sigma)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('delta','sigma'),
generating=c(delta,sigma),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=propdiff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
library(tidyverse)
########################
##### Experiment 1 #####
########################
#Set up dataset for Experiment 1
dat=expand.grid(ll_m=600,ll_d=c(1,10,30,50,100,150),
ss_m=seq(20,600,20),ss_d=0)
hyperbolic.likelihood=function(ll_m,ll_d,ss_m,ss_d,
k,sigma){
#Equation 5
uLL = ll_m/(1+k*ll_d)
uSS = ss_m/(1+k*ss_d)
pLL = pnorm((uLL-uSS)/sigma)
return(pLL)
}
hyperbolic.wrapper=function(pars,dat){
#extract pars
k=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
k,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
k=0.025
sigma=5
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=hyperbolic.likelihood(ll_m,ll_d,ss_m,ss_d,k,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
inits=c(1,1)
#inits=c(k,sigma)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('k','sigma'),
generating=c(k,sigma),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=hyperbolic.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
dat
k=0.025
sigma=10
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=hyperbolic.likelihood(ll_m,ll_d,ss_m,ss_d,k,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
k=0.025
sigma=50
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=hyperbolic.likelihood(ll_m,ll_d,ss_m,ss_d,k,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / max(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / max(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.wrapper=function(pars,dat){
#extract pars
delta=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
delta,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
delta=-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / pmax(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / pmax(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.wrapper=function(pars,dat){
#extract pars
delta=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
delta,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
#data generating values (median of obtain parameters)
delta=-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
debugonce(propdiff.likelihood)
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
(pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m)))
pmax(abs(ll_m),abs(ss_m))
pi_m
(pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d)))
pmin(abs(ll_d),abs(ss_d))
(pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / pmax(abs(ll_d),abs(ss_d))
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / pmax(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / pmax(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
d
pnorm((d-delta) / sigma)
delta=-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta=-10 #-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta=10 #-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta=1 #-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta=-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta= -1 #-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
delta= -1.5 #-.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
tradeoff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
gamma,eps,tau,theta,kappa,alpha){
#Equation 5
term1 = ( (1/gamma)*log(1+gamma*ll_m) - (1/gamma)*log(1+gamma*ss_m) )^(1/eps)
term2 = ( ( (1/tau)*log(1+tau+ll_d) - (1/tau)*log(1+tau*ss_d) )/theta )^theta
term3 = (kappa/alpha)*log(1+alpha*term2)^(1/eps)
pLL = term1/(term1+term3)
return(pLL)
}
tradeoff.wrapper=function(pars,dat){
#extract pars
gamma=pars[1]
eps=pars[2]
tau=pars[3]
theta=pars[4]
kappa=pars[5]
alpha=pars[6]
pLLs = tradeoff.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
gamma,eps,tau,theta,kappa,alpha)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
gamma=0.340
eps=0.931
tau=2.344
theta=2.483
kappa=2.957
alpha=6.8*10^-5
dat = dat %>%
mutate(pLL=tradeoff.likelihood(ll_m,ll_d,ss_m,ss_d,gamma,eps,tau,theta,kappa,alpha))
#visualise tradeoff model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
inits=c(.1,.1,.1,.1,.1,.1)
recov_list=list()
recov_tmp=data.frame(parname=c('gamma','eps','tau','theta','kappa','alpha'),
generating=c(gamma,eps,tau,theta,kappa,alpha),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=tradeoff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
inits=c(gamma,tau,kappa,alpha,theta,eps)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('gamma','eps','tau','theta','kappa','alpha'),
generating=c(gamma,eps,tau,theta,kappa,alpha),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=tradeoff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
inits=c(gamma,eps,tau,theta,kappa,alpha)
#initialise data frame to store outcome
recov_list=list()
recov_tmp=data.frame(parname=c('gamma','eps','tau','theta','kappa','alpha'),
generating=c(gamma,eps,tau,theta,kappa,alpha),
estimated=NA,
sim=NA)
for(i in 1:100){
#Generate one choice for each stimulus
dat_tmp = dat %>% mutate(chooseLL = (pLL > runif(length(pLL)))*1)
#Maximum likelihood optimisation
# inits=runif(6)
output=optim(par=inits,
fn=tradeoff.wrapper,
dat=dat_tmp)
recov_tmp$estimated = output$par
recov_tmp$sim=i
recov_list[[i]]=recov_tmp
}
recov=bind_rows(recov_list)
ggplot(data=recov,aes(x=sim)) +
geom_line(aes(y=generating),color='blue') +
geom_line(aes(y=estimated),color='red') +
facet_wrap(~parname,scale="free")
library(rstan)
rstan::stan_version()
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / pmax(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / pmax(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.likelihood=function(ll_m,ll_d,ss_m,ss_d,
delta,sigma){
#Equation 1
pi_m = (pmax(abs(ll_m),abs(ss_m)) - pmin(abs(ll_m),abs(ss_m))) / pmax(abs(ll_m),abs(ss_m)) #max minus min of each pair divided by max of all options
pi_d = (pmax(abs(ll_d),abs(ss_d)) - pmin(abs(ll_d),abs(ss_d))) / pmax(abs(ll_d),abs(ss_d))
d = pi_m-pi_d
pLL = pnorm((d-delta) / sigma)
return(pLL)
}
propdiff.wrapper=function(pars,dat){
#extract pars
delta=pars[1]
sigma=pars[2]
pLLs = hyperbolic.likelihood(dat$ll_m,dat$ll_d,dat$ss_m,dat$ss_d,
delta,sigma)
pLLs = pmin(pmax(pLLs,0.001),0.999)
neglnLs = -log(dat$chooseLL*pLLs + (1-dat$chooseLL)*(1-pLLs))
return(sum(neglnLs))
}
#data generating values (median of obtain parameters)
delta= -.711
sigma=0.175
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
library(ggplot)
library(ggplot2)
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
#visualise hyperbolic model
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
dat=expand.grid(ll_m=600,ll_d=c(1,10,30,50,100,150),
ss_m=seq(20,600,20),ss_d=0)
delta= -.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
library(tidyverse)
delta= -.711
sigma=0.175
#calculate choice probabilities under data generating values
dat = dat %>%
mutate(pLL=propdiff.likelihood(ll_m,ll_d,ss_m,ss_d,delta,sigma))
ggplot(data=dat) +
geom_line(aes(x=ll_d,y=pLL,colour=factor(ss_m)))
